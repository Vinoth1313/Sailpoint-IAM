<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule created="1670081008037" id="c0a8380184d717d68184d895d1a50152" language="beanshell" modified="1670085090902" name="IT application policy rule" type="Policy">
  <Description>This rule is used to determine if a Policy has been violated.</Description>
  <Signature returnType="PolicyViolation">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identity">
        <Description>
          The Identity being inspected.
        </Description>
      </Argument>
      <Argument name="policy">
        <Description>
          The Policy being evaluated.
        </Description>
      </Argument>
      <Argument name="constraint">
        <Description>
          The Constraint being evaluated.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="violation">
        <Description>
          The PolicyViolation object.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>import sailpoint.object.Identity;
import sailpoint.object.QueryOptions;
import sailpoint.object.Link;
import sailpoint.object.Filter;
import sailpoint.object.Policy;
import sailpoint.object.PolicyViolation;

  
  //Identity identity = context.getObjectByName(Identity.class,"00000003");
  
  String applicationName="IT Application";
  String employeeType=identity.getAttribute("EmployeeType");
  sailpoint.object.QueryOptions qo = new sailpoint.object.QueryOptions();
  qo.addFilter(Filter.eq("application.name",applicationName));
  qo.addFilter(Filter.eq("identity.name",identity.getName()));
  int count=context.countObjects(Link.class,qo);
  PolicyViolation v = null;
    
        if (count>1 ){
           
           v = new PolicyViolation();
           v.setActive(true);
           v.setIdentity(identity);
           v.setPolicy(policy);
           v.setConstraint(constraint);
           v.setDescription("user have multiple accounts");
           v.setStatus(sailpoint.object.PolicyViolation.Status.Open);
    }

    return v;</Source>
</Rule>
